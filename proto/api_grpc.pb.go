// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/Health/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedHealthServer) Watch(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Health/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Watch(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _Health_Watch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// StoriesApiClient is the client API for StoriesApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoriesApiClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddStory(ctx context.Context, in *AddStoryRequest, opts ...grpc.CallOption) (*AddStoryResponse, error)
	GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error)
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error)
	GetMostViewedStories(ctx context.Context, in *MostViewedStoriesRequest, opts ...grpc.CallOption) (*MostViewedStoriesResponse, error)
	GetTopRatedStories(ctx context.Context, in *TopRatedStoriesRequest, opts ...grpc.CallOption) (*TopRatedStoriesResponse, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error)
}

type storiesApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStoriesApiClient(cc grpc.ClientConnInterface) StoriesApiClient {
	return &storiesApiClient{cc}
}

func (c *storiesApiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) AddStory(ctx context.Context, in *AddStoryRequest, opts ...grpc.CallOption) (*AddStoryResponse, error) {
	out := new(AddStoryResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/AddStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error) {
	out := new(GetStoryResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/GetStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/UpdateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error) {
	out := new(SearchStoriesResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/SearchStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) GetMostViewedStories(ctx context.Context, in *MostViewedStoriesRequest, opts ...grpc.CallOption) (*MostViewedStoriesResponse, error) {
	out := new(MostViewedStoriesResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/GetMostViewedStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) GetTopRatedStories(ctx context.Context, in *TopRatedStoriesRequest, opts ...grpc.CallOption) (*TopRatedStoriesResponse, error) {
	out := new(TopRatedStoriesResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/GetTopRatedStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesApiClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error) {
	out := new(DeleteStoryResponse)
	err := c.cc.Invoke(ctx, "/StoriesApi/DeleteStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoriesApiServer is the server API for StoriesApi service.
// All implementations must embed UnimplementedStoriesApiServer
// for forward compatibility
type StoriesApiServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddStory(context.Context, *AddStoryRequest) (*AddStoryResponse, error)
	GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error)
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error)
	GetMostViewedStories(context.Context, *MostViewedStoriesRequest) (*MostViewedStoriesResponse, error)
	GetTopRatedStories(context.Context, *TopRatedStoriesRequest) (*TopRatedStoriesResponse, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error)
	mustEmbedUnimplementedStoriesApiServer()
}

// UnimplementedStoriesApiServer must be embedded to have forward compatible implementations.
type UnimplementedStoriesApiServer struct {
}

func (*UnimplementedStoriesApiServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedStoriesApiServer) AddStory(context.Context, *AddStoryRequest) (*AddStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStory not implemented")
}
func (*UnimplementedStoriesApiServer) GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (*UnimplementedStoriesApiServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (*UnimplementedStoriesApiServer) SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStories not implemented")
}
func (*UnimplementedStoriesApiServer) GetMostViewedStories(context.Context, *MostViewedStoriesRequest) (*MostViewedStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostViewedStories not implemented")
}
func (*UnimplementedStoriesApiServer) GetTopRatedStories(context.Context, *TopRatedStoriesRequest) (*TopRatedStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopRatedStories not implemented")
}
func (*UnimplementedStoriesApiServer) DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (*UnimplementedStoriesApiServer) mustEmbedUnimplementedStoriesApiServer() {}

func RegisterStoriesApiServer(s *grpc.Server, srv StoriesApiServer) {
	s.RegisterService(&_StoriesApi_serviceDesc, srv)
}

func _StoriesApi_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_AddStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).AddStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/AddStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).AddStory(ctx, req.(*AddStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).GetStory(ctx, req.(*GetStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/UpdateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_SearchStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).SearchStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/SearchStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).SearchStories(ctx, req.(*SearchStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_GetMostViewedStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MostViewedStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).GetMostViewedStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/GetMostViewedStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).GetMostViewedStories(ctx, req.(*MostViewedStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_GetTopRatedStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRatedStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).GetTopRatedStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/GetTopRatedStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).GetTopRatedStories(ctx, req.(*TopRatedStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesApi_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesApiServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoriesApi/DeleteStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesApiServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoriesApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StoriesApi",
	HandlerType: (*StoriesApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StoriesApi_Ping_Handler,
		},
		{
			MethodName: "AddStory",
			Handler:    _StoriesApi_AddStory_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _StoriesApi_GetStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _StoriesApi_UpdateStory_Handler,
		},
		{
			MethodName: "SearchStories",
			Handler:    _StoriesApi_SearchStories_Handler,
		},
		{
			MethodName: "GetMostViewedStories",
			Handler:    _StoriesApi_GetMostViewedStories_Handler,
		},
		{
			MethodName: "GetTopRatedStories",
			Handler:    _StoriesApi_GetTopRatedStories_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _StoriesApi_DeleteStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
